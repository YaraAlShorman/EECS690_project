/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.12.2023 06:08:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 8
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 9600;
#else
constexpr int kTensorArenaSize = 8576;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[13];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3168 } };
const TfArray<1, float> quant0_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 99, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data5[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension5 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data6[2] = { -1, 3200, };
const TfArray<1, int> tensor_dimension6 = { 1, { 2 } };
const ALIGN(8) int32_t tensor_data7[2] = { -8971, 8971, };
const TfArray<1, int> tensor_dimension7 = { 1, { 2 } };
const TfArray<1, float> quant7_scale = { 1, { 7.408713372569764e-06, } };
const TfArray<1, int> quant7_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[2*3200] = { 
  -10, 0, -25, -16, -37, 3, 7, -7, 7, -14, -8, -14, -10, 21, -1, -2, -2, -10, 3, 4, 9, 34, 12, -11, -36, 0, -5, 25, -6, -24, -15, 9, -6, 7, 7, -27, -8, 0, 1, -15, -10, -2, 7, 13, -5, -16, 11, -8, 1, 11, 15, 1, 3, -6, 19, -7, -6, -22, -2, 0, -8, 11, -4, -7, 3, -21, -13, -8, 6, -11, -2, -10, -10, 6, -15, 15, -1, -11, -21, -6, -16, -64, -10, 3, -16, 14, 13, -11, -12, 12, -1, -29, -14, 6, -11, -17, 9, -10, 17, 2, 7, 12, -18, 1, 3, -10, 0, -1, 13, 3, 10, -9, -1, -2, 12, 9, -9, -6, -6, -2, -34, 5, -13, 18, 2, -6, 1, 5, 2, 2, -25, -13, -6, 9, -10, -13, -4, -10, -20, -1, 1, 1, 2, 9, 7, 6, -23, -15, -15, 11, -1, -13, 4, 3, -12, -3, -9, 3, -6, -4, 6, -11, -10, -13, -3, 0, 12, -3, -5, 8, -20, -8, -2, 1, -5, 6, 0, -54, 6, 2, -19, 19, -7, 5, 11, 2, 2, -16, -14, 8, 9, 12, 5, 5, -16, 13, -1, -4, -11, 17, 0, 13, -28, -15, -9, 2, -13, -17, -11, -15, 3, 2, 15, -4, -43, 0, -6, -1, -17, 4, 0, 1, 17, 7, -4, 2, -3, 34, -11, -5, -13, -2, -3, 9, -4, -8, -20, -7, -6, -11, 6, 9, 1, -10, -17, -5, -2, -13, 5, 4, 0, -16, 4, -9, -4, -23, -13, 3, -4, -4, -8, 8, -1, -3, 9, -10, 1, 12, 0, -23, -5, -11, -7, -24, -3, -31, 7, -17, -5, 2, -8, 4, 9, 13, 8, -2, 0, -4, -21, 11, -10, -14, -15, -8, -3, 7, -5, -19, -7, -20, 9, -9, -17, -5, -8, -25, -7, -10, 1, 30, -17, -14, -19, -3, -18, 11, -5, -43, -9, -31, 11, -8, 0, -15, -17, -6, -2, 0, 2, 6, -28, -21, 2, -1, -27, 17, -5, -42, -3, -9, -45, -7, 18, -6, -4, 11, 7, -8, -10, -8, -2, -11, -5, 11, -2, 30, -24, 4, 20, 8, -17, 8, -20, -14, 13, 6, 0, 4, 11, 1, 7, -12, 21, 4, 7, -4, -17, -16, -11, -20, 23, -89, -3, 14, -5, 6, -2, -71, -5, -3, -14, -13, -1, -9, 2, -22, -2, -17, -15, -18, 4, -1, -4, -3, -25, -24, 0, 3, 6, -8, -11, -6, 3, -1, -8, -9, -3, -10, -7, -2, 1, 5, -4, -26, -10, 8, -21, -1, -5, -33, 3, -18, -23, 1, 3, 10, 3, -3, -29, 1, -38, -16, 1, 14, -15, -5, -16, 2, -20, -5, 0, 0, -3, -7, 1, 1, 0, -5, -18, 10, -4, -27, -10, -15, 6, -17, -12, 4, -6, -22, -49, -2, -12, 2, 1, -3, -12, -27, -14, -11, -5, -8, -8, -61, -23, -18, -5, -5, -14, -4, 7, -2, -5, 7, 3, -8, 8, -13, 8, -9, -9, 13, -19, -21, 0, -5, -1, -14, -12, 13, -1, -1, 17, -16, -15, 14, 3, 5, -7, 4, -10, -16, -13, 10, 1, -11, 4, -2, 1, -17, -1, -3, -2, 21, 4, -1, 29, -5, 5, 14, -14, -11, -7, -3, -2, -20, 9, -17, 0, 5, 14, -26, 2, -3, 2, -17, -17, -4, -14, -2, -6, 5, -7, -17, -5, 20, -18, -2, 19, -6, 19, 11, -14, -7, 16, 4, -24, -16, -7, -34, 23, -12, 6, 6, -8, -11, -42, 9, 2, -10, -22, -11, -15, -22, 9, -16, -30, -1, 38, -12, -15, -14, -8, -20, -36, -6, -15, 9, 13, -9, 9, 0, -11, -8, -33, 5, 9, -1, -5, -17, 28, -3, -2, 10, 3, -9, -10, -12, 14, -9, -10, -1, -6, 8, -3, -7, -2, 9, -12, -4, -3, -3, 14, -12, -5, 9, -7, -4, -9, -7, 7, 11, 6, 17, -4, -3, -7, -7, -14, 27, 1, -29, 0, -12, -9, 0, 7, -11, -17, -17, 6, -1, -14, -2, -11, -22, -9, 5, -47, 12, 0, 5, 7, -13, 7, -6, -8, -17, -2, -17, 0, -11, -3, -41, -20, -16, -21, -9, -3, -1, -11, 0, -13, -17, 8, -10, -9, -3, -7, -6, 2, -28, -3, -11, -26, -24, -2, -4, 6, 5, -15, -56, -7, -2, -10, -11, -17, -7, -10, -11, -8, 3, -16, -4, -26, 0, -13, -16, -19, -14, -3, -6, -9, -4, -7, 8, 7, -4, -17, -9, -2, -29, 19, 4, -25, -3, 1, 3, -20, -6, 5, 2, 1, -1, -1, -6, -8, -18, 6, -3, -12, -4, 5, 4, -2, 6, 4, -5, -1, 1, -3, -13, 0, -1, -19, 33, -1, 27, -6, -7, -20, 6, -10, 7, -8, 2, -9, 2, 10, -6, -9, -12, 8, -35, -2, -3, -20, 1, 1, 4, 4, -12, 11, -9, 27, -11, 2, -21, -6, -1, -7, 2, 14, -12, 6, -16, -16, -3, -24, -9, 0, -11, -7, 22, 11, -7, -15, 10, -8, -13, -7, 15, 4, -14, -1, 3, -1, 9, -5, -50, -3, 7, -5, -2, 1, -2, -15, -2, -14, -11, 5, -7, 13, -10, 2, -10, -13, -31, -30, -10, 29, 1, -10, 9, -4, 3, -21, -10, -10, 6, -10, -9, -14, -10, -7, 12, -12, -13, 4, -14, 1, 7, 7, -4, 8, 36, -10, 4, -24, -20, -2, 5, 3, 2, -17, -13, 3, -18, -11, 6, 6, -1, -19, 14, 3, 19, -13, 6, 10, -5, 7, -23, -8, 4, -10, -17, -17, -10, 0, 31, -9, 5, 12, -9, -15, -3, 5, 7, -2, 8, 12, -25, -18, 13, 3, 7, -5, -11, -3, -6, -6, -2, 14, -17, 14, -4, 9, -24, -5, -27, 7, -8, 6, -33, -13, -8, 13, 9, -1, -7, -11, -10, -5, -20, -7, -13, 7, -15, 5, -1, -16, -11, -31, 10, -3, -31, -2, -15, -21, 4, -27, -14, 8, -17, 7, 32, 4, -16, -7, 19, 7, -9, -11, -5, -14, 0, -6, -12, 0, -3, -3, 6, -23, 11, -7, -11, 13, 0, -16, -4, -19, -10, -12, 32, 20, -8, -28, 33, -33, 2, 0, -1, -15, -10, 8, 9, 3, -16, 1, -6, 15, 10, -5, 15, -15, 12, -8, -20, 14, -6, -2, 17, 10, -22, -5, -5, 8, -11, 11, 11, 1, 9, 6, -16, -16, -4, -26, -2, -2, 6, 15, -3, -1, 8, 2, -2, -5, -13, -11, 0, -17, -3, 3, -7, 8, 7, -8, 18, -19, -15, 10, -13, 4, -5, -1, -9, 4, -5, -14, -4, -5, 1, -7, -22, -8, -45, 15, -5, -22, -6, 1, 6, -2, 7, -16, -3, -24, -16, 15, 5, -7, -15, 1, 19, -20, -12, 8, 0, -3, 2, -10, -4, -12, -8, -9, -29, 0, 10, -6, -7, -14, 0, -13, -8, 5, -9, 4, 5, 1, 3, 1, 6, -8, 7, 2, -30, -4, 10, -1, -12, 3, 11, 0, -4, -1, 4, -22, -9, 11, 4, 7, -27, -17, -16, -8, 19, 9, -1, 13, 2, -5, 12, 11, -5, 4, -5, 0, 5, 7, -12, -5, -4, -5, -8, -1, -1, -8, -3, -14, -3, -3, 26, -6, -27, -2, 34, -8, -3, 0, 3, 4, 3, 2, 13, 12, -18, 1, -5, -10, -23, 2, 6, -20, 33, -3, 0, -41, -20, -4, 5, 2, -4, 4, -16, 6, 5, -9, -5, -35, 14, 11, -8, -3, -5, -12, 6, -6, 2, -12, -2, -23, -2, -3, 10, -17, -8, 4, -6, 13, 8, -31, 11, 7, -26, -17, 2, -5, -7, 4, 9, 2, -15, 1, -2, 4, 10, -19, -1, 1, 13, -12, -10, -14, -25, 6, -3, -13, -10, -5, -9, -16, -8, -16, -44, 4, -13, 5, 1, -3, 8, -20, -26, -13, -23, -6, 2, -13, -1, -8, 4, -4, -3, -3, 32, 9, 8, 2, -18, -9, -2, 5, 4, -17, -15, -3, -6, -2, -15, 9, -4, 1, -3, -4, -8, -13, 3, -32, -10, -3, -4, 11, 19, -12, 3, 11, -6, 0, 2, -22, 4, 0, -10, -23, 4, -37, -6, -17, 7, 3, -9, -7, 27, -11, -10, 47, -6, 6, 4, -18, -1, -3, 12, -9, -2, -1, -12, -24, 2, -9, -25, -22, -1, 0, -1, -4, 1, -21, -15, -4, 0, -20, -30, -30, 5, -9, -1, -36, -7, 22, -5, -22, 6, -27, 8, 12, -13, -12, -23, -8, -11, -37, 14, -12, -4, 3, -11, -7, -9, 1, 12, -11, -14, -13, -17, 5, 2, -17, 3, -27, 6, 4, 5, -42, 10, -5, 6, 0, -14, -5, 8, -9, -12, -8, -1, 1, -3, -15, 12, 4, 4, 4, -28, -2, -9, -6, -10, -8, 28, -8, 10, 8, -61, 11, -18, -19, -1, 1, 12, 6, -12, 2, -20, -5, -6, 10, -21, 3, 5, -3, -7, -39, 3, -38, -15, -7, 3, -11, -9, -10, -37, -5, 6, -27, 6, 14, 0, -3, 6, 3, 10, -17, 2, -15, -12, 1, -6, -2, 33, -3, -5, 11, -17, -3, 2, 14, 2, -8, -13, -16, 2, -14, 11, -21, -4, 5, -2, 5, -7, -11, 2, -1, -13, -7, 33, -3, 21, 0, 13, 12, -7, -11, 9, -20, 2, 14, -9, 8, -22, 1, -30, -12, 7, -19, -19, -14, 8, -7, -26, -15, -20, 1, -3, -3, 1, 5, -8, -9, 5, 2, -18, 6, -6, -2, 6, -11, -18, -10, -11, -3, -38, 1, -3, -5, -1, -3, -10, -1, -27, -12, 22, 22, 1, 14, 12, 1, -4, -11, 3, 0, -1, 0, 1, 7, 10, 10, 5, -19, 16, 1, 2, -33, -3, 2, 3, -11, -5, -8, -49, -1, 7, 39, -2, 1, 1, -3, -16, 2, -8, -13, -7, -11, -10, -12, -2, -12, 10, -21, -4, 0, 5, -3, -11, -8, -5, 16, 8, -6, -13, -9, 3, -9, -11, 14, 7, 15, 9, 10, -9, -22, -11, -8, -7, -13, -9, -8, -4, 22, -35, 7, -3, 7, -16, -6, -10, 8, -16, -15, 19, -2, -2, 10, -16, -10, -37, -8, -2, -16, -16, 4, -16, -14, -26, 1, -15, -4, -8, 6, -34, -17, 7, -17, -18, 19, 7, -13, 7, -3, 4, -6, -13, 2, -22, 2, -19, -4, 7, -8, -28, -6, -7, -1, 12, -17, 4, -20, 7, 2, -22, 13, -14, 1, -14, -10, -2, -19, -32, 6, 0, -47, 13, -5, -9, 17, 3, 1, -29, -11, -2, -21, -33, 22, 10, 5, 1, 7, 9, 8, 18, 12, -7, 11, -11, 2, -50, -9, -12, -17, -2, 6, -7, 28, 11, 38, -10, 23, -9, 4, -6, -4, -3, -10, -3, -16, -19, 6, -12, -5, 18, 8, 8, 6, 18, 16, 8, 8, 19, -12, 3, -7, 7, 9, 4, -6, -7, 6, 12, 8, 12, -4, 1, 5, -1, -8, 2, 1, 12, 38, 11, 1, -9, -16, -22, -7, 5, -5, -12, -2, -15, -4, 10, 10, -22, 2, -3, -13, -2, 8, -1, 0, 4, -5, -15, -12, -13, -10, 17, 20, 2, 18, -15, 21, -5, 10, 3, 3, 3, -4, -8, 9, -22, -7, -2, -12, 35, -8, 6, -47, -1, 3, -2, 0, 3, -7, -67, -12, -18, -12, -11, -16, -10, -10, 23, 11, -23, -20, 11, -3, -8, -19, 15, -12, 10, -5, 3, 8, -10, -7, -7, -1, 9, 50, 3, 23, 8, 2, 3, 3, -3, 4, -16, -25, -11, -18, 15, -3, -23, -23, 7, -2, -7, -20, -6, -25, -65, -1, 12, -2, -17, 5, -10, -2, -16, -12, -18, -4, -10, -4, -41, -7, -9, 11, 8, 4, -3, -43, -7, 3, 2, -9, -15, -4, 3, -11, -24, 3, -14, -7, -5, -14, -7, -1, -15, 1, -39, -8, -6, -11, -13, -2, -25, -9, -18, -10, -15, -23, -11, -56, -9, -19, 11, 8, 13, -18, -23, -34, -1, -20, -25, 0, -11, -6, -26, -12, 3, -30, 0, -8, 2, -42, 7, -9, -94, -10, -13, -32, -16, -6, -17, -18, -11, -17, -27, -17, -23, -1, 2, 4, -12, -20, -37, -31, -13, 16, 2, -5, -11, -4, 10, -5, -1, 8, -25, 6, 6, -4, 7, 0, -3, -9, 5, -36, 5, -2, -5, -17, -24, 2, 0, 16, 12, -22, -17, 0, -7, -3, -1, 6, -4, 12, 2, -9, 25, 3, 6, 7, -12, -6, -16, -21, 16, -7, 14, -1, -17, 2, -2, 10, -22, 7, -3, -18, -17, -12, 2, 10, -16, 12, -23, -6, -11, 1, -33, 6, -12, -2, 8, -11, 4, 15, -62, -6, 29, 19, 6, -8, 1, 2, 2, 9, 7, -13, -13, -12, -10, -1, 5, -3, 8, 0, -9, 7, -20, -39, 14, -10, -2, 0, 2, -4, -59, -1, -5, -21, -14, 31, 12, 2, -7, -9, -19, -21, -14, -11, 6, -9, 1, -14, 5, -22, 9, -4, -1, 11, -9, -2, -14, -54, 2, 6, -29, -10, 6, -11, 7, -1, 9, -6, 1, -2, -4, 2, -6, -9, -13, -7, -8, -8, -2, -9, -7, 0, 13, 11, -22, 1, 12, -2, -10, 6, -12, 4, -9, -4, 17, -1, -20, 24, -24, 9, 15, -7, -10, -10, -15, 1, -40, -13, -8, 4, -26, -12, 0, -18, -9, -33, 1, 0, -9, -1, -12, -11, -2, 0, -14, 3, 13, -21, 21, -4, -9, 1, 4, -18, -14, 9, -7, 7, 4, -5, -10, -13, -2, 8, -11, -7, -6, 6, 44, 6, -13, -4, 12, 2, -1, -22, -10, -10, 22, 1, -3, -13, 11, 11, 0, -4, -20, 15, -2, -19, -8, 32, 5, -1, -1, -16, -6, 6, -14, -13, 6, -3, 7, -6, 8, -5, -1, -19, -18, 14, -13, -18, -2, -9, 3, 21, 9, -10, -8, -2, 3, 6, 9, 0, 4, -11, -8, 4, 20, 11, -5, 0, -9, 7, -2, 2, -18, -1, 1, 3, 4, -21, 1, -2, 1, -15, -6, -3, 11, 8, -5, -12, -4, -16, 7, -11, -1, -3, -21, -29, -11, -3, 5, 15, -13, -6, -1, 4, 6, 8, -1, 13, 17, -1, 54, 1, -2, -8, 38, -6, -11, 42, 9, 25, 9, -12, 5, 5, 7, 16, 4, 7, -19, 1, -19, -15, 28, -12, -1, -41, -32, -7, 8, -4, 10, 13, -12, 5, 2, -17, -5, -34, 8, 0, -4, 17, 11, -2, -4, -11, 9, 14, 26, 4, 44, -2, -4, -1, -14, 6, -2, 0, -12, 4, -17, -7, -7, -6, 9, -6, 3, 10, 3, -4, -15, 2, -6, -12, 40, -5, -19, 11, 25, 4, 19, -7, -116, -13, -9, -8, -15, -1, 11, -14, -28, -27, -5, 8, 5, -6, 4, 2, -30, 7, -8, -18, 22, -27, -11, -1, -15, -15, -20, -25, 12, -3, -7, -6, -5, -12, -4, -5, 10, 2, -10, 0, 2, 6, -2, -5, -18, 19, -20, 10, -41, -1, 1, 3, 0, -35, -8, -27, 4, -27, 19, -7, 3, -6, 2, 0, -8, -2, 5, -7, -20, -26, -19, -34, -22, -3, -7, -5, -7, -13, -10, -9, 10, -10, -2, -52, 10, -3, -6, -1, -1, -19, 4, -7, -1, 2, -13, -16, -26, 4, 0, -34, 4, -15, -16, -7, -3, 4, -17, 0, 13, -7, 4, -2, 1, 1, -4, 10, 7, -1, -4, -19, 13, 12, -30, -7, 31, 19, -1, -38, -37, 13, -1, -13, -8, 3, -10, -6, 6, -14, -10, -7, 10, -4, -12, -3, -6, -5, 17, -4, 14, 22, 1, -10, 1, -6, 0, 4, -1, 4, 15, 11, -14, -4, 0, 7, -13, 0, -8, 1, -28, -10, 0, 10, -1, 0, -4, -5, -11, -18, 16, 18, -7, -4, -2, 13, -8, -6, -4, -15, -29, 1, 5, 6, -1, -9, 3, -2, 8, -19, -14, -28, -7, -4, -5, -12, 7, 12, -27, -2, -2, -14, -5, -23, -6, -17, -17, -19, 11, -27, -16, -17, 9, -9, 0, 23, 9, -3, 7, -2, -15, -3, 4, -27, -9, -17, -5, -10, 3, -11, -10, -4, -1, 8, -4, -4, -8, -7, -18, -5, -21, 15, -6, 0, -12, -11, -7, -8, -15, -2, -8, -2, -9, 20, 11, 3, -23, 5, -27, -17, -11, -19, -10, 4, -2, -3, 6, 7, 15, -13, -3, 9, 8, -9, -10, 0, 3, 8, -31, -10, 10, 4, -1, -11, 11, -13, -7, -14, -23, -2, 9, -17, 17, 16, 4, -2, -7, 9, 0, -5, 10, -16, 5, -3, 11, -5, -15, -8, -16, -14, 13, -1, 6, -4, 8, -35, -33, -12, 3, -25, 11, -15, 4, -31, 8, 7, -47, 2, -7, 6, -9, -5, -4, 18, -11, 9, -26, 8, -3, -23, -5, 18, 12, -12, -11, -26, 5, 6, -19, 8, -2, 9, 2, -3, -15, 24, -16, -6, -9, -24, -9, 4, 15, 10, -16, -1, -7, -10, -20, -16, 14, 2, -12, 9, 3, -1, 0, -2, -10, 12, 4, -1, 13, 9, -11, 1, -20, -8, -2, -11, -22, -1, 3, -3, -3, -10, -5, 2, 3, -5, -2, 6, -19, -8, -11, -2, -10, 2, -5, 2, -7, -5, -16, -6, 13, -11, -30, 0, 7, -10, 4, 6, -5, -5, -7, 6, 14, -29, 7, -6, 4, 14, -8, -8, -1, 2, 1, 4, -6, -8, -25, -13, 8, -24, -1, -23, -1, -36, -12, -10, 3, 3, 6, 10, -41, -3, -4, -16, 8, -1, 7, 20, -1, 10, -15, -1, -16, -9, 8, 10, -6, -18, -37, -19, -3, 7, 6, -1, -7, -4, -11, 18, -1, 6, -21, 1, 1, -17, -8, -15, -5, -3, 4, 10, 9, -6, 11, -20, 33, 9, 13, 5, 6, -18, 11, 6, -9, -3, -8, 0, 9, -3, 23, -5, -17, 10, -1, -11, -14, -20, 17, -22, -7, -17, -1, 4, 11, 8, -2, 4, -1, -1, -16, 1, -2, -9, 13, 8, -6, 29, -9, 9, 9, -9, -4, 3, -16, -9, 17, -12, 17, 9, 24, -15, 4, 0, -1, 10, 2, 16, 6, -17, -23, 2, -6, -4, 7, 23, -14, 3, -8, 6, 11, -18, 4, -34, 11, -5, 4, -14, 9, 3, -39, 0, -5, -13, 3, 6, -9, 0, 24, 6, 13, -9, 15, -12, -20, 13, -3, 6, -10, -20, 3, -3, -8, 1, 1, -16, -10, -2, -1, -5, 14, -1, -7, -7, 6, 4, 3, 27, -16, -13, -16, 11, 23, 4, -8, 3, -8, 19, 3, 1, 75, -1, 15, 7, -29, 7, -4, -46, -10, -20, -27, -13, -8, -15, 1, -4, 6, 2, -7, -14, -8, 9, 3, -11, -3, -6, -17, -2, -8, 4, -39, -15, 4, 2, -8, -6, -17, 5, -1, -5, -9, -2, 13, 9, -5, 2, 12, -13, 1, 4, 47, -3, 2, 38, 8, -2, 2, -7, -24, 7, 14, -32, 8, 9, -12, -5, -4, 8, 30, -3, 2, -33, -10, 2, 12, 7, -12, -3, 4, -4, 6, -41, -2, 38, -1, 7, 1, -4, 3, -19, -19, 12, -4, 2, 0, 25, 41, -4, 0, -9, -1, 8, 2, -1, 14, -11, -10, 9, 1, -13, 12, -4, 1, -7, 5, -4, -3, -8, 12, 3, 14, -1, 7, 2, -10, 
  -2, -18, 6, 1, 19, 14, -2, -7, -2, -3, 15, 17, 9, -13, 1, -5, -1, 12, 5, -1, 5, -34, 1, 20, 37, 10, 7, -20, -8, 12, 2, 6, -12, 4, -2, 27, 7, -11, -1, 17, 1, 5, -2, -15, 2, 1, 1, 8, -8, -12, 6, -4, 12, 6, -19, -10, 28, 6, -6, -2, 3, -6, -9, 4, 7, 26, 19, 14, 2, -4, 14, 0, 8, 13, 7, -15, 9, 2, 12, 9, -1, 72, -4, 6, 6, 3, -10, 12, 9, -7, -1, 16, 14, 7, 12, 0, 3, -8, -24, -3, 12, -7, 3, -1, 10, 17, 14, 1, -29, 9, -28, -3, 3, 5, -11, 4, 3, -2, -10, -7, 26, 5, 11, -20, 5, -10, 5, -13, 12, -8, 13, 26, 18, 8, 11, -7, 8, 4, 15, 10, -2, 16, 12, 7, 15, 12, 1, 5, 18, -24, -11, 1, -5, 3, -9, 3, -1, 16, 6, 16, -7, -5, -7, -4, 17, 17, -11, -15, -8, 12, 26, 9, 5, 3, -6, 7, -19, 48, 16, -12, 13, -36, 15, -2, -17, -9, -12, 11, 1, 5, -4, -8, -10, -8, 9, 5, 5, 10, 12, -32, -8, -2, 21, 5, 6, -12, 4, -2, 12, 17, -9, 8, 2, 13, 50, 15, -9, -12, 17, 8, 13, -4, 0, -4, -8, 5, 21, -34, 5, -4, 12, -13, -9, 4, -1, -9, 9, -4, 2, -4, 3, 5, 12, 17, 13, 21, 16, -2, -18, 7, 5, 16, 6, 20, 2, 23, -7, -24, 18, 18, 5, 1, -9, 16, 4, -4, 9, 2, -4, 11, -3, 11, 3, 29, 18, 31, 13, 13, 8, 9, 11, 10, 2, 4, -10, 8, 6, 6, 11, 2, -6, 18, -4, 6, 8, 13, -2, 20, 15, 21, 4, -1, 14, -3, -4, 18, 10, 24, -8, -20, 21, 11, 1, -5, 1, -19, -2, 36, 4, 30, -3, -7, 0, 6, 14, -14, -2, -2, 8, -5, 33, 15, 13, 12, 29, -3, 5, 43, 10, -2, 38, -1, -38, 1, 15, 1, 4, 1, 21, 4, 1, 1, 7, -8, -1, -32, 12, -5, -1, 1, 15, -5, 12, -4, -2, 0, -3, 1, -16, 3, -10, 12, -14, 8, -24, 10, 23, 7, 19, 14, -17, 90, 7, -24, 12, -6, 2, 73, 17, -4, -8, 14, -1, 2, 9, 25, 13, 5, 2, 3, -4, -4, 12, 11, 27, 23, -4, -3, 0, 4, -5, 1, -2, 10, 12, 11, 0, 6, 7, -15, 7, 9, 5, 22, 10, 3, 7, 8, -9, 19, 8, 10, 1, 2, 7, -7, 1, 22, 14, -4, 32, -7, 5, 2, -5, -2, 22, 15, 9, 18, 5, 10, -3, 2, 7, -1, -7, 20, 16, -7, 7, 23, -5, 19, -5, 10, 9, 2, 2, 2, 43, 3, -4, 17, 6, 18, 14, 23, 23, 12, -5, 3, -10, 72, 24, 18, -2, 12, -3, 19, 6, 12, 6, -1, 9, 21, 3, 15, -2, 13, -6, -7, 7, 8, 3, 0, 7, 5, -1, -23, 15, -22, -23, 6, 23, 5, 13, 2, 10, -10, 17, -5, 10, -11, -1, 20, -1, 19, 4, 12, -3, 20, 9, -17, -2, 9, -21, 5, -7, 5, 9, 28, -8, 14, -6, 16, 3, 8, 4, -13, -14, 12, 14, 1, 1, 24, 9, 6, 9, -2, 4, -2, -9, 21, -4, -26, 0, 2, -12, 2, 0, 11, -7, 3, -12, -6, 16, -1, 2, 16, -7, 22, 0, -7, 11, -4, 42, -2, -18, -7, 7, 25, 13, -2, -2, -1, 27, 9, -45, -6, 13, 16, 5, 19, 15, 21, 21, 5, 0, 11, -15, -5, 21, -8, 18, 11, -11, 0, 3, 12, -28, -5, 4, -9, -5, 8, -8, -1, 3, 4, -5, -8, -3, 10, 20, 12, 11, 3, 10, 15, -10, 5, -7, 16, 14, -14, 12, -15, 6, 2, -4, 3, 4, -25, 1, -2, 20, -1, 4, -21, -6, 34, 10, 17, -2, -6, 13, 1, 10, 30, 0, -3, 12, -2, 13, 17, 4, 8, 52, 7, -9, 7, -4, 17, 11, -4, 14, 8, -16, 20, -9, 4, -1, 43, 10, 1, 7, 14, -10, -12, 17, 17, 6, 8, 4, 6, 14, 11, -3, 1, 12, 24, 0, 1, 14, 29, -10, 2, 5, 3, 12, 42, 4, 0, 16, 5, 39, 7, 8, -7, 14, 3, 7, 3, 24, -5, 3, 8, 4, 15, -4, 9, -1, -1, 8, 3, 1, 5, 30, -6, 5, 14, -21, -10, 3, 12, -3, -6, 18, 3, -11, -8, -1, 0, -1, 19, -5, 10, 10, -8, 17, 3, -7, -1, -17, -6, -3, -1, 6, 1, -1, 14, 16, -2, 9, -39, 6, -43, 22, -5, 14, -12, 10, 0, -1, -8, 6, -7, 8, 6, 14, 17, -9, 37, 11, 2, 18, -7, 1, -13, 5, 12, 7, 12, -12, 3, 8, 9, 5, 0, 8, -17, -10, -6, 1, 12, 23, 4, 26, -4, 5, 17, 0, -10, -8, 10, 2, 0, 7, 25, 5, -6, -1, 3, 12, -3, 2, 7, 15, 54, 2, 9, 13, 8, -3, 11, 20, 10, 10, 0, 13, 11, -7, 1, 10, 6, 11, 27, 29, 9, -13, 7, 19, 9, 3, -1, 23, 3, -2, 2, 7, 4, 12, 0, 1, 3, 24, 0, 5, 11, 2, -9, 5, -2, 1, -30, 16, 1, 24, 10, 14, -9, 15, -15, 8, -9, -17, 10, 15, 10, 3, 5, 4, -10, -1, -20, 13, -5, 12, -2, 12, 9, 18, -6, 12, 19, 16, -2, 16, -17, -8, 0, -5, 3, 17, 6, 12, -8, -4, 0, 0, 12, 5, 8, 7, 0, 8, 6, -1, 8, 15, 1, -19, 17, -11, 14, -5, 30, -5, 15, -6, 18, 12, 15, 21, 16, -9, -25, 14, 7, 17, 10, 5, 15, 3, 6, -10, 13, 9, -2, 5, -4, 23, -8, 0, 36, 9, 9, 1, -10, 12, 5, 5, 1, -4, -34, 8, 21, 17, -17, -5, 13, 14, 20, -4, 18, -1, -9, -8, 0, -1, 11, 9, 1, 6, 17, -10, -6, 9, -1, 23, 7, 19, -32, -3, -2, 10, -47, 21, -1, 1, 6, 8, 19, -2, 0, 16, 25, 8, 4, -7, -3, -3, -9, -3, -20, 14, 10, -19, 9, 7, -17, -6, 15, 4, -6, -13, -3, -14, -5, 9, -8, -12, -4, 20, 15, 13, 5, -6, 10, -26, 0, 6, 4, -5, -10, 5, 10, 11, 10, 17, 15, 8, 17, -4, -11, 11, -4, 22, 16, 7, 24, 7, 12, 4, -1, -1, 16, 32, 2, -12, 6, 12, -2, 9, 39, -13, 11, 24, 10, 6, -10, 11, 2, -1, -14, 17, 11, -1, -6, -2, -3, -1, -20, 15, 14, 5, 8, -12, 8, 17, 7, 14, 8, 20, 10, -13, 5, 15, -10, 22, 12, 11, 19, -12, -2, 2, 4, -7, -5, -9, -10, 3, 0, 4, 12, 6, 0, 6, 10, -1, -13, 1, -10, 14, -11, 16, 3, -5, 10, 11, 30, 17, 14, 10, -17, -26, -8, -13, 3, -6, 6, -9, 6, 18, 2, 11, -9, -21, 15, 15, 3, 13, 11, 2, -10, 5, 8, 6, 6, 7, -28, 21, 40, 6, -24, -10, 7, -5, -9, 2, 0, -1, 3, 1, 9, 8, -4, 7, 10, 7, -1, -2, -21, 11, 4, 36, 16, 5, 0, 1, 6, 10, 21, -13, 5, 11, 6, 24, -5, -3, 9, 7, 3, 8, -16, 12, -13, -5, -7, 11, -2, 4, -1, 13, 7, -7, 11, -12, 10, 30, 11, -15, 22, 0, -11, 11, -2, 0, -1, -5, 17, -17, 10, 2, -8, 6, -18, 2, -7, 12, -6, 18, 22, -20, 8, 11, 9, 21, 10, 16, 12, 10, 31, 11, -1, -5, -4, 1, -17, 23, 25, 13, 31, 15, -5, 15, -17, -1, 4, 2, 7, -6, -9, -8, -16, 2, 11, 14, 13, 12, 6, 12, 15, -11, 21, 2, 8, 14, 2, -2, -15, 18, 26, 13, 16, 18, 2, 3, -4, 3, -15, 6, 12, -1, 13, 0, 1, 10, 8, 12, 8, 18, 0, 19, 11, 11, 9, -2, 9, 3, -25, 12, 11, -41, 13, -26, 4, 1, 3, 3, 6, 12, 20, -8, 11, 4, -9, -1, 44, 21, -2, 3, 18, -1, 15, 21, 6, -7, 0, 20, 15, 32, 7, -10, 11, 23, -3, -12, 20, 14, -5, 27, 9, -8, 18, 19, 23, 1, 3, 22, -7, 5, 13, -1, 22, -9, -10, -8, 5, -10, 21, -3, 13, -15, -4, -4, 17, 18, -11, -9, -12, 30, -14, 3, -11, 6, 7, -8, -4, -1, 10, 8, -1, -3, 0, 27, 12, -4, -1, -6, 20, -5, 4, 10, 8, 20, -31, 16, -17, 8, 52, 5, -3, 8, -5, -12, -1, -9, 5, 2, 20, 8, -4, 0, 10, 9, -9, -3, 18, 34, -1, 43, 15, -6, -5, 23, 1, 0, 55, 3, 10, 26, -4, -7, -6, 2, 12, 5, -1, 3, 14, 2, 0, 14, -18, 4, -26, 5, 12, 9, 19, -7, 2, -19, -9, -9, 9, 12, 7, -1, -4, 16, 7, 4, -7, -7, 15, 25, -7, -8, 5, 10, -18, -1, -1, -11, -6, 5, 7, -9, -9, 4, 4, -1, 11, 1, 8, 1, 17, -2, -7, 0, 31, -2, 8, 19, 31, 6, 20, -15, 4, 14, -4, -5, 11, 3, -4, 9, 12, -13, -5, -5, -6, 30, 13, 12, 6, 18, 29, 3, 7, -10, 13, 10, 9, 9, 10, 8, -15, -15, -7, -8, -11, 1, -13, 9, 7, 14, 0, 4, 3, 8, -1, 2, -6, 18, -28, -7, -5, 47, -10, 17, -4, 7, -15, -1, 50, -13, -8, -36, -2, 11, 8, 10, 2, 1, 9, 13, 16, 15, 9, 16, -14, 31, -7, 23, 6, 11, 2, 7, 1, 24, -1, -12, 2, 8, 10, 11, -5, -2, 4, -6, 4, -6, -5, -13, 5, 9, 9, 21, 16, -8, 7, 13, -8, -10, 43, 2, 7, 0, 10, 6, 6, -15, 6, -1, -22, -2, 8, -12, -3, -5, 31, 4, -3, 10, 8, 0, 0, 10, 8, -9, 2, 7, -10, -6, 38, 14, 4, -2, 18, -4, 4, 3, 3, 24, 17, 1, -5, 3, 4, -5, 42, 6, -1, 8, 33, 9, -4, 6, 2, 25, -3, 19, -11, 3, 19, -16, 3, -1, 1, -2, 9, 3, 39, 17, 14, 42, -10, -7, -2, -18, 6, 3, 11, 0, -2, 16, 19, -13, 1, 2, -4, 5, -29, 5, -12, -7, -4, -1, 16, 9, 60, 11, 19, 22, 0, 7, 0, -6, 11, -18, 7, -28, 12, -4, 1, 9, 2, 7, 10, 6, 10, -4, 4, 2, -22, 0, -11, 11, -18, 3, -7, 2, -28, 8, 5, 8, 0, 0, 14, -2, 4, 1, 0, 0, -4, 15, -5, 4, 6, 2, 2, -3, -19, -47, -8, 12, -3, 14, 11, -6, 11, 0, 13, -3, -4, -2, 0, 7, 20, 11, -11, 17, 20, 1, -6, -1, 5, -3, -9, 7, -7, -1, -10, -2, 1, -25, 6, -7, 7, -5, -5, 7, 5, 10, 16, -6, 6, 25, 15, -11, -45, 11, -3, 49, -14, 5, 13, -7, -10, -5, 79, -1, 14, 4, 14, -3, 3, 7, -7, 4, 17, 32, 3, 1, 4, 0, -3, 9, -29, -7, 4, -7, -8, -7, 3, -8, -3, -52, 12, -10, -10, 0, -6, -10, 4, -2, 3, 4, 19, 16, -6, 6, 14, 28, -1, 6, -3, 4, 8, 15, 69, -4, 7, 17, 32, 8, 3, 4, 2, 17, 13, -3, -1, 12, 37, 0, 11, 7, -24, 7, -12, 47, 0, 6, 5, 0, 21, 3, -1, 2, 21, 5, 28, 4, -7, 10, 16, 2, -6, -7, 32, 0, 5, 19, 21, -4, 11, -2, 31, 11, 24, 13, 14, 43, 13, 34, 9, 2, -9, 0, 11, 25, 11, 18, 35, 9, 2, 14, 29, 4, 6, 32, 5, 14, 19, 34, 11, -10, 103, -9, 0, 42, 1, 20, 0, 2, 4, 17, 32, 27, 30, -4, -10, 10, 3, 32, 40, 18, -9, -15, -2, 16, 2, 3, -12, 13, 0, -4, 8, 12, 14, 16, 7, -9, -7, 5, 5, 39, 4, 7, 23, 8, 22, -6, 4, -11, 10, 0, 17, 2, 5, -4, 7, 15, 13, -13, -15, -1, -10, 14, 6, 3, 0, 8, -4, 9, -28, -8, 0, 2, 11, -4, -1, -2, 20, -9, 21, 18, 26, 18, -7, 11, 2, -9, 16, 2, 16, 13, 33, 10, 33, 12, -9, -7, 5, -9, 49, 3, -21, -12, 10, 10, 12, 2, 5, -6, -5, 15, 3, -3, 17, -1, 15, -10, 2, 1, 7, -3, 23, 41, -29, 14, 18, -9, 8, 4, 74, 2, 8, 15, 7, -32, 11, 16, 6, 11, 10, 13, 11, 5, -6, -4, 15, 20, 10, 13, -8, 7, 2, -17, -4, 6, 5, 61, -7, -18, 21, 7, -3, 7, 5, 16, 0, 20, 4, 8, 8, 2, 10, 18, 20, 12, 10, 0, 16, 8, 0, 12, -5, 6, 15, 13, -4, 9, -5, 2, 11, 2, 9, 3, -13, 18, 29, -14, 16, -6, -11, 26, 13, 0, 17, -10, 17, 18, -9, 15, 12, 2, 3, 12, 1, 38, -14, 11, 0, 1, 29, 5, 4, 14, 3, -7, 1, 0, -18, -7, 5, 16, -7, 15, 10, -17, 5, 8, -13, 10, -8, 12, 10, 2, 19, 7, 11, -4, -32, -3, 7, -7, -8, 0, 1, 13, 12, 2, -7, -6, 6, 9, 10, 10, 7, -17, 12, 6, 7, 9, 7, -26, 1, 9, 7, 13, -6, 3, -1, 20, 4, 13, -2, 17, 10, 15, 14, 37, 25, 1, 9, 13, -12, 6, 16, -8, 1, -5, 6, 15, -6, -12, -6, 7, 4, 11, 0, 6, -20, -11, 4, 2, 15, 8, -13, -13, 20, 15, 8, -6, 6, 19, -3, 10, -12, 13, -11, 23, -10, -4, 15, 5, 8, -4, 5, -3, 4, 11, 13, 6, 10, -2, -8, -8, -3, -2, -5, 4, -5, 10, -3, -9, -1, 7, -47, 15, -14, 15, -36, 7, -8, -35, 12, -36, -7, 17, -10, 8, -7, -9, -15, 4, -4, 4, -3, 18, -25, 1, 4, 40, 18, -15, -8, 1, 2, -9, 13, -7, -13, 5, -4, 44, 12, -15, 3, -6, 6, 5, -5, 14, -13, 6, -13, -11, -64, 10, 4, 0, -2, -3, 12, 8, -2, -5, 14, -15, 0, 16, -3, 20, 7, -4, -8, 20, 13, 3, -1, 14, -53, 0, 18, 2, -7, 0, 1, 4, 127, 13, -1, -5, 1, 9, -9, 4, 49, 11, 10, 5, -11, 19, -14, -6, 31, -4, 10, 26, -21, 11, 11, 0, 16, 8, 18, 10, -9, -14, -3, 19, 16, 19, 11, 15, -11, 3, 5, -12, 13, -4, 20, 9, 20, -5, 7, -20, 37, -1, -12, 1, -8, 46, 18, 18, -15, 5, -19, 2, -2, 3, 10, 5, 5, -5, 0, 0, 18, 37, 4, 29, 10, 5, -3, -2, -4, 1, -3, 3, -3, -1, 4, 56, -9, -2, 2, -6, 1, -2, 1, 2, 12, -4, 18, 23, 20, 3, -4, 26, 11, 15, 10, 1, 5, 9, 7, -15, -3, 3, 11, 9, -8, -16, 1, 6, 9, 2, 18, 13, -24, -17, 42, -11, -12, -4, -7, 25, 29, -7, -8, 6, 7, 2, -6, 13, 1, 7, 9, -4, -1, 10, 16, 1, 25, 14, 2, -2, -4, -21, 2, 3, -13, 0, 10, -13, 12, -15, -7, 4, 16, 15, 20, -8, 6, -2, 3, 9, 41, 5, 8, -7, -5, 1, 5, -2, 6, 9, -24, -2, -4, 9, -2, -17, -1, 7, 4, 25, 19, 14, -19, 7, 12, -9, 10, -7, -27, 21, 17, 43, 5, 4, 13, 26, -4, 6, 9, -7, 2, 30, 16, 1, 18, 16, 6, -1, -6, 25, 5, 22, -4, 13, 1, -5, -15, 11, -13, 14, 16, 11, 8, 25, 3, 28, -2, 4, 11, 18, 0, 16, 5, -3, -1, -1, -1, 20, 3, -7, 29, -15, 2, 10, 20, 16, 9, 9, 10, -7, -9, -14, 8, 1, -5, 2, 20, 0, 26, 12, -10, 20, 11, -4, 1, 17, 2, -3, 6, 32, -1, -5, -11, 11, 20, -4, -7, 1, 44, 9, 4, 2, 7, 30, -13, -2, -10, 13, 13, -9, -8, 12, -7, -11, 0, -3, 7, -8, -8, 8, 8, 29, -4, -4, -17, 13, 18, 6, 18, -6, 6, 12, 5, 16, -10, 11, 18, 14, -1, 28, 3, -1, 7, 21, 12, -6, 59, -3, 10, -7, 2, 6, 0, -15, 5, -12, 9, -12, 9, 41, -10, -7, -7, 12, 15, 7, 14, -6, 14, 2, -3, -11, -23, -13, 16, -20, 30, -14, 10, 31, 3, -3, 6, -2, 21, -7, 14, 12, 22, 19, -26, 2, 10, 8, 16, 8, 6, 10, -8, 12, 0, -5, 1, -15, 12, 8, 8, 11, -11, 20, 22, 15, -2, 4, 1, 8, -3, -4, 10, 13, -10, 12, 7, 0, 6, -3, 23, 15, 14, -10, 0, 11, 11, -1, -7, -5, 24, -1, 0, 18, 8, 9, 4, -10, 15, -12, -15, 29, 5, 23, 0, 2, 8, 17, -11, -7, -23, 8, 13, 9, 13, 20, 11, 23, 9, 20, 5, 35, 3, 7, 5, -2, 7, 10, 35, -13, -13, 31, -7, 3, 0, -14, -9, 7, -6, 1, 11, 7, -3, 8, -8, 15, 34, -4, 12, 11, 10, -8, 7, 11, 5, -19, 7, -8, 3, 2, -1, 6, 14, 2, -8, 21, -7, 5, 7, -5, -20, 7, -15, 0, -25, -13, -2, 12, -5, -11, 12, 10, 18, 20, -1, -6, -10, -14, -1, -10, -9, 3, 23, 20, -19, 20, 8, 4, -11, -22, 1, 4, 5, 10, -6, 0, 1, 6, -17, 13, 6, 6, 2, -29, 10, 3, 0, 15, 7, 0, -1, 6, -32, 19, -11, -10, -11, 8, -6, 4, -9, 8, -6, -18, -6, 10, 32, 13, 3, 21, -3, -2, 11, 11, 20, 7, -14, 25, 8, 35, 4, -10, 9, 6, -11, -6, 39, 17, 14, 2, 5, -8, -2, 7, -14, 10, -14, -1, -4, -8, 5, -17, -5, -5, 7, 7, 12, -19, 3, -21, 3, 13, 5, 13, -11, 3, -16, -5, -3, -2, 12, -13, 0, -39, -3, 5, 6, -4, -17, -8, 1, 1, -3, -5, -5, 4, -61, 3, -8, 1, 22, -7, 7, 40, 14, 14, 25, -7, -1, 19, -2, 14, -17, 16, 4, 8, 8, 5, -1, -6, -7, 11, 16, 21, 3, 10, 26, 16, -1, -6, 7, -4, 10, 8, -16, -4, 11, -2, -5, -7, 0, -4, 4, 4, -7, 2, -28, 11, 1, -21, 12, 6, 2, -9, 29, -14, -28, 32, -12, 0, 19, 5, -5, 3, -35, -2, -9, 43, 23, 2, 6, 6, -6, 19, 4, -8, 12, 61, 1, -36, 2, 3, -5, -3, -10, -1, 2, -25, -14, 4, -2, -7, -52, 0, 0, 7, 0, 9, -6, -3, 5, 2, 12, -1, -9, 16, -12, 13, 12, 9, -8, -8, 4, 11, -8, 0, -19, 9, -3, 11, 8, 
};
const TfArray<2, int> tensor_dimension8 = { 2, { 2,3200 } };
const TfArray<1, float> quant8_scale = { 1, { 0.0035095466300845146, } };
const TfArray<1, int> quant8_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[128] = { -2933, -5352, -403, -1163, -3946, -4012, -4420, -5509, -5398, -2952, -4656, -4723, -3134, -1704, -6576, -4075, -3381, -1184, -4179, -1843, -1353, 740, -4700, -2676, -4800, -4152, -4528, -3866, -3860, -1049, -3890, -3009, -5649, -973, -3511, -3701, -2951, -4683, -3020, -2986, -4044, -2904, -4009, -407, -3143, -2932, -4667, -5529, -3439, -3359, -4626, -3103, -3164, -4385, 535, -5923, -1863, -3740, -2947, -5380, -3269, -3993, -5602, -1443, -3227, -2028, -3452, -3717, -2893, -5867, -4038, 2731, 574, -3874, 2256, 733, -5662, -5105, -2958, -6167, -4800, -6156, -4447, -4848, -3416, -5207, -3949, -2534, -3346, -4080, -2279, -4198, -420, -4527, -4453, -3823, -6358, -4970, -3327, -4963, -1576, -2342, -4094, -1684, -4436, -1781, -2482, -3293, -4099, -4372, -1873, -6288, -805, -5562, -3147, -3988, -3486, -4202, -6381, -3437, -5172, -6778, -3724, -4250, -9303, -4461, -4718, -4752, };
const TfArray<1, int> tensor_dimension9 = { 1, { 128 } };
const TfArray<1, float> quant9_scale = { 1, { 2.0358504116302356e-05, } };
const TfArray<1, int> quant9_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[128*1*1*16] = { 
  /* [0][0][][] */ 21,-11,-3,33,10,-53,-5,2,-26,-79,59,76,-79,-13,-15,-34, 
  /* [1][0][][] */ 12,9,-77,-59,1,44,16,-32,-28,-26,-40,-28,-30,28,-23,38, 
  /* [2][0][][] */ -48,-47,26,16,87,-61,-26,-52,35,-81,-12,-23,-20,-21,-20,-58, 
  /* [3][0][][] */ -27,67,-2,-33,-18,-55,-98,-87,-45,-102,-101,-53,31,31,3,-55, 
  /* [4][0][][] */ -4,6,-77,19,54,6,-47,-21,-60,9,-54,25,44,-10,-73,-116, 
  /* [5][0][][] */ -30,-59,-21,-8,-1,-12,13,-23,12,-7,-6,-32,36,-31,-62,-38, 
  /* [6][0][][] */ 35,16,28,-60,-27,-26,18,-59,37,-7,-45,-12,5,-30,-56,-65, 
  /* [7][0][][] */ -37,-43,-34,-50,-32,-74,-104,19,17,-62,-33,-49,-75,20,-42,15, 
  /* [8][0][][] */ 16,-49,-77,-17,-56,44,-18,-83,23,-35,-31,-61,38,-12,26,28, 
  /* [9][0][][] */ -68,-18,48,23,-91,-13,35,41,-31,12,-59,38,20,-43,36,-28, 
  /* [10][0][][] */ -64,5,-5,-14,17,13,-38,0,-72,-37,41,-6,-39,-20,24,-54, 
  /* [11][0][][] */ -23,-64,17,-30,9,0,7,-54,-48,-9,-4,-15,-61,-49,-61,-5, 
  /* [12][0][][] */ -36,-41,-21,46,-64,35,-51,-72,-38,-70,-52,25,-14,-62,16,12, 
  /* [13][0][][] */ -77,-61,39,-60,-23,-38,-107,-3,-44,-55,26,16,-44,-13,5,-13, 
  /* [14][0][][] */ -67,3,-27,8,-37,-5,33,10,-46,-30,-41,39,7,41,-33,-29, 
  /* [15][0][][] */ 14,-53,-49,-85,-14,-29,-58,1,-7,-44,-84,-77,-14,41,16,25, 
  /* [16][0][][] */ 6,4,-70,-25,-82,-34,-54,-48,1,-59,-22,24,32,-79,-13,-52, 
  /* [17][0][][] */ -59,23,-44,-31,38,5,39,-23,13,-68,-38,-48,16,21,-64,5, 
  /* [18][0][][] */ 36,-40,3,-34,-26,-5,-8,24,17,-36,32,-17,-16,-39,31,-110, 
  /* [19][0][][] */ 13,14,-35,-29,-26,-32,-17,-53,-26,-61,-50,-57,-83,47,-44,5, 
  /* [20][0][][] */ -61,-31,13,41,-46,15,-68,37,38,-47,46,13,-54,29,-99,-10, 
  /* [21][0][][] */ -83,-63,-31,-21,-62,-16,-24,-18,-86,-46,61,-4,17,-12,-26,19, 
  /* [22][0][][] */ -57,-52,0,-69,13,38,21,5,9,-81,-88,-41,27,-62,-32,-78, 
  /* [23][0][][] */ -26,-38,20,-26,-17,-34,53,-56,-31,-61,11,9,-44,46,-32,26, 
  /* [24][0][][] */ -127,15,52,40,69,-35,-52,-46,-82,-38,53,58,-14,46,20,33, 
  /* [25][0][][] */ -7,-76,-18,-57,6,26,1,-7,-3,-30,-46,-24,-63,-15,29,18, 
  /* [26][0][][] */ 39,-27,25,-52,5,15,-27,-68,23,-38,-34,41,-37,-54,-20,-76, 
  /* [27][0][][] */ 22,-11,-51,-73,-14,-38,5,-7,6,-14,-40,-5,-70,-41,-44,-60, 
  /* [28][0][][] */ -24,-20,-38,-62,17,-15,-4,-73,-1,-38,41,31,29,-11,-1,27, 
  /* [29][0][][] */ -14,8,-76,-25,-16,16,3,52,-76,41,12,24,-2,-17,30,28, 
  /* [30][0][][] */ 24,7,-4,38,-53,30,14,-80,-30,-46,53,11,5,41,-11,-39, 
  /* [31][0][][] */ -34,-67,3,-63,-55,-56,-56,20,48,-33,-24,23,-18,-4,25,-71, 
  /* [32][0][][] */ 40,-30,-35,-66,48,-85,-66,-53,-63,-32,-32,20,11,23,31,5, 
  /* [33][0][][] */ -56,-69,-71,-9,-23,-43,-13,20,-35,-26,-3,-58,-1,-9,9,-4, 
  /* [34][0][][] */ 12,-4,-53,-20,-42,-28,24,-8,16,-51,-11,38,-53,33,-67,-66, 
  /* [35][0][][] */ -76,-58,-32,10,48,2,2,-22,-45,-32,-49,49,-18,24,7,-35, 
  /* [36][0][][] */ 15,-54,-21,-19,38,30,40,11,17,-6,-49,-52,21,-57,-22,-44, 
  /* [37][0][][] */ -7,-12,-34,45,-13,-21,-62,13,4,21,24,12,-20,21,-89,16, 
  /* [38][0][][] */ -56,-27,30,54,-58,-17,-58,-63,-91,21,52,-24,-94,24,-29,50, 
  /* [39][0][][] */ -77,6,19,13,13,-21,-18,50,50,-50,16,-17,-23,-59,13,-97, 
  /* [40][0][][] */ 23,-2,-25,-65,-22,26,-58,-31,43,-50,14,26,-10,-9,33,-54, 
  /* [41][0][][] */ 21,-42,12,-23,3,37,-64,-10,-64,-35,-2,-34,8,-15,18,-22, 
  /* [42][0][][] */ 41,-52,49,-13,-85,44,23,38,0,-33,-30,-54,-22,-30,-51,-69, 
  /* [43][0][][] */ -29,-109,-2,18,66,-48,-15,52,-53,64,7,18,-51,-66,-20,-37, 
  /* [44][0][][] */ -23,-31,-47,-22,-28,8,-36,13,28,14,-60,-66,17,37,-1,-55, 
  /* [45][0][][] */ -5,78,-62,-57,-4,-2,-4,-60,36,28,-1,-54,21,29,24,-6, 
  /* [46][0][][] */ 32,14,-16,-4,-30,-79,12,-49,4,-56,-42,36,-53,-22,-64,-64, 
  /* [47][0][][] */ -3,-83,34,-38,18,-15,-62,-44,-44,-1,-62,-52,-4,-55,16,-8, 
  /* [48][0][][] */ -51,4,-68,-24,-8,-28,-63,-50,33,11,-14,-36,13,-46,-44,-23, 
  /* [49][0][][] */ 54,-85,69,-73,-14,-13,9,-48,30,-75,-52,-28,-30,-41,13,-35, 
  /* [50][0][][] */ -9,-35,-54,-41,-63,22,-9,13,-18,-59,-2,-29,9,25,19,43, 
  /* [51][0][][] */ -109,1,-62,21,17,28,-37,-67,-30,-2,-40,-47,34,-35,55,5, 
  /* [52][0][][] */ 38,-19,11,-3,-85,-37,27,18,43,-55,-4,32,-68,38,-59,-36, 
  /* [53][0][][] */ -44,0,5,-43,-47,-38,-2,-79,23,9,1,-30,-117,12,-15,89, 
  /* [54][0][][] */ -43,-18,-49,-53,38,-44,8,-44,-28,-79,3,1,-34,0,-50,-20, 
  /* [55][0][][] */ -53,-10,-11,41,-23,-52,-44,3,-45,16,-36,-13,-25,3,7,28, 
  /* [56][0][][] */ -2,50,6,42,60,42,-10,-91,-37,-81,-45,-82,-67,-21,11,49, 
  /* [57][0][][] */ 16,-77,-18,17,20,36,-4,-10,-49,-44,-3,-17,-13,2,-21,-83, 
  /* [58][0][][] */ -2,-31,34,-3,6,49,-3,-28,-43,-64,-29,-81,27,-38,-51,46, 
  /* [59][0][][] */ 32,-39,-54,31,-39,34,-56,-72,-44,14,-81,-53,21,-73,-33,20, 
  /* [60][0][][] */ -68,-46,-46,41,45,1,-31,16,-27,-22,-37,-3,33,-60,-29,8, 
  /* [61][0][][] */ -4,-64,-60,-66,-13,-69,16,-51,-54,46,-64,-41,13,7,-2,37, 
  /* [62][0][][] */ 39,-40,-19,-6,51,-36,-40,36,-19,14,-45,23,-75,-67,-20,-1, 
  /* [63][0][][] */ 53,-37,-54,-6,27,0,-64,7,-71,-76,-36,-38,-47,41,-75,-71, 
  /* [64][0][][] */ -42,-21,-91,-8,34,37,-55,22,39,-70,-59,-31,-50,-21,49,-26, 
  /* [65][0][][] */ 9,38,-26,-21,-11,-4,4,11,-6,-14,-35,51,-17,-35,17,38, 
  /* [66][0][][] */ 31,36,-23,38,70,29,21,-31,-44,-52,-64,-6,27,21,20,-28, 
  /* [67][0][][] */ -3,-16,-32,-10,77,47,-47,-97,-24,29,-15,-30,-16,-75,33,-16, 
  /* [68][0][][] */ 22,4,-18,44,-55,-24,-14,18,-28,-68,14,-40,3,-1,-39,-40, 
  /* [69][0][][] */ -9,34,-31,-56,-69,41,-62,34,10,-18,-24,-10,5,-48,-82,-96, 
  /* [70][0][][] */ -44,-48,-43,-34,-7,-56,-79,13,6,-26,-47,-4,26,-54,-51,-19, 
  /* [71][0][][] */ -37,47,47,-69,8,21,-37,-78,-94,12,-43,59,54,-22,37,38, 
  /* [72][0][][] */ -76,9,-8,-16,50,-41,-48,-13,4,-8,70,-17,-75,-2,-56,-17, 
  /* [73][0][][] */ -2,31,-51,-37,23,-27,11,11,25,30,-8,-12,-51,13,-45,-35, 
  /* [74][0][][] */ -89,19,-20,-49,20,-72,-72,93,-15,9,32,-66,-12,-43,-66,-21, 
  /* [75][0][][] */ -80,12,-32,-63,-40,26,-77,-35,-14,-15,10,-2,-33,-15,-66,-50, 
  /* [76][0][][] */ -24,-64,25,-3,-1,-44,40,17,-52,29,23,21,-28,-9,-82,48, 
  /* [77][0][][] */ 47,36,1,33,69,-9,-33,2,44,24,-55,-33,-62,-52,-19,43, 
  /* [78][0][][] */ 29,-22,29,-8,97,-61,-75,-21,27,-84,-25,0,-70,3,-27,9, 
  /* [79][0][][] */ 28,40,18,-31,-31,0,-24,23,-82,-31,-50,26,28,6,39,-7, 
  /* [80][0][][] */ 1,-7,4,22,-69,-12,6,8,-44,-38,-40,-46,-47,-9,16,-30, 
  /* [81][0][][] */ -52,-21,-70,1,67,-36,-43,-82,-67,-32,-48,-75,-55,5,-16,18, 
  /* [82][0][][] */ 35,-15,-67,-5,-9,-20,-19,-46,21,21,2,-7,-74,37,-70,-22, 
  /* [83][0][][] */ 27,-11,35,-31,-33,25,-34,10,13,-86,-69,-28,7,-33,15,-70, 
  /* [84][0][][] */ -70,-50,-32,40,67,28,-8,-45,-54,25,-51,-40,-49,-47,44,-71, 
  /* [85][0][][] */ -26,-80,-79,-73,6,40,-2,40,19,-8,-59,-57,22,38,-100,41, 
  /* [86][0][][] */ 28,51,-6,-54,36,-82,-56,-43,-10,-58,-74,-60,-2,-19,-81,-62, 
  /* [87][0][][] */ -47,-14,45,-78,48,24,57,12,30,-11,-50,-40,20,-6,-31,-76, 
  /* [88][0][][] */ -57,-77,41,-17,-15,-72,-3,-21,33,28,-68,-72,18,24,-32,-77, 
  /* [89][0][][] */ -1,-10,-65,-11,-11,-12,-68,11,9,26,-56,27,-83,-20,-23,-31, 
  /* [90][0][][] */ 19,-71,43,27,20,62,-64,8,44,21,5,-42,19,-20,-13,10, 
  /* [91][0][][] */ 11,1,-86,-37,47,-44,-39,-92,-50,-29,6,-47,27,9,-7,21, 
  /* [92][0][][] */ -11,21,9,-46,-34,58,-67,76,45,61,-28,22,51,-77,22,-84, 
  /* [93][0][][] */ -76,-68,24,-46,16,-12,11,36,-50,21,-29,36,-34,-69,29,-12, 
  /* [94][0][][] */ -30,-99,-46,54,34,7,-98,-35,-33,-29,-28,-78,19,29,-24,39, 
  /* [95][0][][] */ 2,-23,-18,-44,-9,-67,4,-63,35,37,17,-51,-78,-70,-44,-22, 
  /* [96][0][][] */ -11,-61,-5,37,-21,-19,-77,-48,-46,19,-77,-14,-40,-66,-19,26, 
  /* [97][0][][] */ 35,25,32,-15,-35,7,2,-81,9,-61,-1,-1,-65,21,-14,1, 
  /* [98][0][][] */ -59,38,-66,12,20,-44,-36,-41,-32,-39,-71,56,-6,-52,21,-68, 
  /* [99][0][][] */ -13,9,19,-50,-34,79,-33,-36,-110,-53,-67,12,-73,-18,-21,48, 
  /* [100][0][][] */ -7,-78,48,26,70,13,-43,51,-3,-59,-35,-47,-9,33,27,48, 
  /* [101][0][][] */ -13,21,3,-3,74,34,17,-71,9,53,-3,2,-43,-12,18,-38, 
  /* [102][0][][] */ -87,40,-11,-69,-43,23,-5,0,-60,-33,-12,-43,5,39,9,-24, 
  /* [103][0][][] */ -49,0,-12,-25,-34,-62,13,-5,27,-45,20,21,-34,-71,-6,-19, 
  /* [104][0][][] */ 1,9,35,14,-27,-29,-61,-58,-14,-9,-35,-47,-51,35,-83,28, 
  /* [105][0][][] */ -41,30,-33,53,9,-50,-51,-42,24,-19,36,-6,43,21,-41,11, 
  /* [106][0][][] */ -68,-2,27,6,45,58,-34,-24,3,7,-30,-36,-78,7,-53,-57, 
  /* [107][0][][] */ 23,-58,-52,2,-29,-29,-49,-16,21,-7,-23,-57,21,29,24,-26, 
  /* [108][0][][] */ 41,-82,20,-19,-55,-30,-69,-28,3,-30,32,-52,-25,-73,-40,-9, 
  /* [109][0][][] */ 36,12,-67,21,-7,45,-54,-40,-13,-55,30,46,11,-34,-5,11, 
  /* [110][0][][] */ -29,-75,2,-37,-4,-51,-73,-9,-67,-14,-72,24,-31,20,-33,-5, 
  /* [111][0][][] */ -86,-99,-75,4,-55,12,-74,39,-59,29,20,-23,-3,24,-46,-34, 
  /* [112][0][][] */ -73,-25,-10,-38,-29,42,-36,-78,-11,-60,47,11,-44,-15,39,-48, 
  /* [113][0][][] */ 5,-57,-63,10,24,35,-84,-14,23,34,-13,-54,-2,-54,-35,-59, 
  /* [114][0][][] */ -92,-61,-89,-15,-49,52,-13,20,-44,21,37,15,-66,-15,-37,47, 
  /* [115][0][][] */ -62,-53,-57,37,-54,21,-57,20,43,-7,-36,21,22,20,-51,-82, 
  /* [116][0][][] */ 11,-17,-57,5,-38,61,-52,-49,-89,-29,3,4,-58,23,5,-3, 
  /* [117][0][][] */ 24,-23,-2,-27,-43,38,19,-33,-52,26,-73,-18,12,-74,-51,-60, 
  /* [118][0][][] */ 13,18,-73,-61,-23,-39,-22,-53,-40,9,-15,-17,23,18,-65,85, 
  /* [119][0][][] */ 22,-46,-26,-27,-38,37,25,37,-12,-64,5,27,-60,-51,-62,-39, 
  /* [120][0][][] */ -63,7,-16,-9,81,-22,-10,0,13,-80,36,-56,-34,-17,5,-48, 
  /* [121][0][][] */ -9,-33,-36,-60,42,-70,-10,11,22,-12,-31,-27,-29,-81,-30,-14, 
  /* [122][0][][] */ -5,-41,27,24,-25,-31,-35,-70,-36,-56,56,31,-21,-28,17,-86, 
  /* [123][0][][] */ -53,-116,-86,0,-14,-63,-86,-15,28,21,-59,64,31,17,1,4, 
  /* [124][0][][] */ -35,-8,-77,13,37,-44,-61,-124,-35,22,-32,-6,15,0,7,-29, 
  /* [125][0][][] */ -91,33,-31,-50,25,17,-102,-108,-23,-75,-17,-52,2,-49,11,-32, 
  /* [126][0][][] */ 5,-78,-78,-35,-42,-75,-64,13,3,35,19,-18,-70,-18,4,40, 
  /* [127][0][][] */ -81,-55,-64,-74,-69,15,25,-11,41,31,22,-12,-19,-5,-21,-28, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 128,1,1,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.0031675610225647688, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[16] = { 2500, -4792, -929, -1839, -3145, -3053, 481, -2674, -959, -3258, -509, -2661, -107, -1820, -3326, -3696, };
const TfArray<1, int> tensor_dimension11 = { 1, { 16 } };
const TfArray<1, float> quant11_scale = { 1, { 2.7986869099549949e-05, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[16*1*3*8] = { 
  /* [0][0][][] */ 23,9,57,50,-66,-65,-31,5, -6,-10,-68,-26,-102,-18,41,-77, 40,53,-12,18,-87,-84,-9,-2, 
  /* [1][0][][] */ -71,73,79,29,7,-62,-14,39, -82,-15,-4,1,39,74,63,38, 22,-20,25,-25,-14,-105,-10,-12, 
  /* [2][0][][] */ -30,24,-14,-11,12,-20,-2,51, 58,-3,68,43,19,-86,-10,65, -67,44,0,-29,-30,-14,57,21, 
  /* [3][0][][] */ 23,-59,11,-31,38,-47,-76,20, -2,-72,-33,47,-24,-63,-65,17, -69,-28,-42,-35,3,-39,18,22, 
  /* [4][0][][] */ -50,-60,-78,-54,-83,-66,9,-6, -67,-36,-35,-66,-7,27,6,-28, 8,15,12,-65,-32,65,-17,1, 
  /* [5][0][][] */ -69,10,37,33,-29,-88,-82,67, -77,32,-28,-36,34,25,-75,-26, -48,62,46,22,-21,-18,-57,35, 
  /* [6][0][][] */ 50,-28,-4,57,-52,-53,-21,22, 34,-34,48,-73,-20,-17,-25,30, 1,-107,-24,59,-3,-9,-127,-85, 
  /* [7][0][][] */ -40,35,-14,-94,-83,56,60,0, 19,45,11,33,59,66,36,-1, -19,-23,-59,-43,62,34,67,0, 
  /* [8][0][][] */ 32,-48,66,40,26,-36,64,44, -32,-35,-38,35,57,-54,-60,69, -37,-50,41,27,-9,17,-36,-23, 
  /* [9][0][][] */ 15,-56,42,36,-47,50,42,30, -36,-47,19,-51,9,49,-25,7, -26,-52,0,49,-1,21,-72,53, 
  /* [10][0][][] */ -72,-56,-56,9,17,-32,8,-2, -79,-40,-34,-12,-38,-77,-62,37, -35,-30,-28,34,-34,44,-53,61, 
  /* [11][0][][] */ -86,-17,-55,54,44,10,-58,-50, -37,-48,40,-1,47,-78,-20,28, -26,-13,-80,32,-71,-100,-86,-27, 
  /* [12][0][][] */ -77,-17,-96,61,-29,-8,61,-30, 21,-51,-79,-35,-100,0,-79,-45, 20,-3,42,13,26,-102,-39,9, 
  /* [13][0][][] */ 1,-42,-23,-33,-80,13,-74,-35, 34,4,-53,-11,-78,-75,-63,-66, -42,-15,54,-12,46,-64,-65,44, 
  /* [14][0][][] */ 17,-12,26,-42,-20,28,-2,-49, -27,31,41,-3,-42,-4,28,-52, 23,-21,35,65,0,-95,-51,-95, 
  /* [15][0][][] */ 23,45,9,-13,-2,-38,-87,58, -7,13,65,-36,27,-106,-15,54, -75,-21,31,-78,-41,-24,-14,47, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 16,1,3,8 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0038576468359678984, } };
const TfArray<1, int> quant12_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int32_t tensor_data13[8] = { 1042, -7241, -6706, -3033, -2120, -4049, -5363, -5053, };
const TfArray<1, int> tensor_dimension13 = { 1, { 8 } };
const TfArray<1, float> quant13_scale = { 1, { 1.6741121726226993e-05, } };
const TfArray<1, int> quant13_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[8*1*3*32] = { 
  /* [0][0][][] */ 31,-5,-49,-12,-82,-43,4,-35,-14,-18,34,-36,38,-35,-55,18,-16,-12,-17,-32,9,12,43,70,2,-5,9,-81,-40,-66,-89,49, 17,-59,12,-47,14,-50,-5,28,13,6,-27,42,-31,-37,40,6,-21,-9,40,53,-54,39,4,51,17,22,-7,30,-31,11,15,-24, 7,-36,6,-39,10,-41,-34,29,-20,-34,0,14,39,24,-41,15,29,-5,41,-31,61,-35,-20,-22,-49,15,-9,-38,27,-54,-42,3, 
  /* [1][0][][] */ -50,-9,39,43,-45,45,-37,35,-5,11,-30,-32,34,-67,33,15,-77,-52,38,29,4,-7,39,6,-6,-47,-38,-33,-52,28,-40,-43, -69,30,34,23,-30,-14,0,-3,33,1,-27,-3,-14,29,24,23,-27,-29,-48,24,6,0,-32,36,13,-74,-31,-12,13,11,2,-39, -104,10,18,8,-29,62,18,14,20,47,6,-25,8,-8,-9,-58,21,-74,-48,-28,-1,23,38,-6,-70,-21,-11,7,37,-6,-39,-42, 
  /* [2][0][][] */ 52,50,-81,-36,-60,-62,15,6,-39,17,40,-57,22,-85,-25,4,22,-66,-2,16,26,36,-5,14,-28,-25,-23,-77,-19,-38,-70,37, -28,15,54,-34,2,-8,5,-29,51,-4,-26,-40,11,-20,23,-34,24,-61,47,-21,-53,42,5,43,-50,-17,73,30,-47,33,27,-5, -51,1,-45,4,3,-15,-7,52,-38,41,12,-49,-50,15,-37,-8,-13,-58,-53,12,21,-11,31,38,23,-47,0,-1,3,-17,-21,2, 
  /* [3][0][][] */ -47,-51,-23,-45,29,-77,30,-8,26,-34,-4,-27,-25,-6,-3,-22,30,-1,5,26,14,7,0,43,7,35,40,-43,42,14,23,26, 28,-11,-2,5,-33,-18,-56,17,-51,-20,-9,-36,18,0,37,-51,24,13,-47,0,-24,-31,47,-54,48,17,-9,5,20,13,-21,43, 3,-79,-14,-68,-7,-61,29,44,10,-26,-34,-41,-19,-55,30,-37,24,-27,15,-22,9,10,14,24,-55,-9,43,-50,-67,2,-71,12, 
  /* [4][0][][] */ 13,-4,0,50,-42,46,12,26,-21,-38,-60,10,27,24,-39,22,-71,-52,-73,6,0,-8,-30,17,-40,-2,-16,7,31,-8,-55,-23, -92,48,71,2,-15,56,-17,8,14,-16,22,-29,-43,-7,28,-52,7,-19,-32,13,18,31,-39,6,-25,7,17,-44,-13,15,68,18, -5,61,35,15,26,48,-4,56,-64,-47,13,23,-17,19,-43,-14,27,-61,-69,-41,-12,-3,42,19,-45,-27,-45,22,37,15,-27,15, 
  /* [5][0][][] */ -13,105,100,84,45,56,-13,11,-16,13,-38,15,8,-4,2,0,-40,15,-11,14,21,-20,16,-25,0,-48,-30,7,-39,54,-76,7, 5,94,127,63,29,41,52,9,-38,-75,-10,-8,3,-26,-17,-25,-27,-26,-44,-23,-40,18,-22,62,-8,-34,13,49,19,-2,9,-36, -21,86,80,79,35,58,20,3,-46,2,-73,-58,-13,26,-30,-35,27,-36,39,16,6,34,13,12,21,41,7,-8,-25,40,-25,-13, 
  /* [6][0][][] */ 23,105,98,59,-5,52,-4,-3,-37,-73,-54,-11,-27,-31,-6,-21,-25,17,-14,20,17,13,-17,50,-11,-35,20,-3,1,-4,29,-40, 15,44,71,82,-9,62,-19,-20,-24,-66,-24,-42,-46,42,1,-4,-7,8,-44,4,-51,63,38,6,-27,-40,1,25,-11,-19,-12,-4, -65,97,68,61,33,22,59,35,-59,5,-82,5,46,24,-54,-31,-20,-53,-65,-27,-13,-36,-25,-7,39,12,-63,-23,7,-30,13,-39, 
  /* [7][0][][] */ 2,20,27,18,17,19,-48,22,-15,-48,31,-71,18,-60,-32,-2,-12,27,-46,-9,-4,2,-50,16,25,-29,-5,25,32,28,-24,-29, -14,42,-9,-30,11,4,9,-34,-24,-1,-21,-28,-59,-59,3,28,-15,0,14,-47,8,31,-39,-18,-64,-13,-11,-47,-30,12,21,-5, -28,-25,11,11,14,6,-38,-14,31,6,27,-15,-6,4,-29,-6,-9,-34,-45,-5,-1,-14,-35,-11,-32,14,-22,-12,-74,18,-5,19, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 8,1,3,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.0042857271619141102, } };
const TfArray<1, int> quant14_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,1,99,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.0072549069300293922, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant17_scale = { 1, { 0.0072549069300293922, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant18_scale = { 1, { 0.0072549069300293922, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant19_scale = { 1, { 0.0072549069300293922, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<4, int> tensor_dimension20 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant20_scale = { 1, { 0.0064271860755980015, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant21_scale = { 1, { 0.0064271860755980015, } };
const TfArray<1, int> quant21_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.0064271860755980015, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<4, int> tensor_dimension23 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.0064271860755980015, } };
const TfArray<1, int> quant23_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<4, int> tensor_dimension24 = { 4, { 1,1,25,128 } };
const TfArray<1, float> quant24_scale = { 1, { 0.0021110172383487225, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<2, int> tensor_dimension25 = { 2, { 1,3200 } };
const TfArray<1, float> quant25_scale = { 1, { 0.0021110172383487225, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<2, int> tensor_dimension26 = { 2, { 1,2 } };
const TfArray<1, float> quant26_scale = { 1, { 0.023628965020179749, } };
const TfArray<1, int> quant26_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<2, int> tensor_dimension27 = { 2, { 1,2 } };
const TfArray<1, float> quant27_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 15 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 15,14,13 } };
const TfArray<1, int> outputs1 = { 1, { 16 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 16,2 } };
const TfArray<1, int> outputs2 = { 1, { 17 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 17 } };
const TfArray<1, int> outputs3 = { 1, { 18 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 18,3 } };
const TfArray<1, int> outputs4 = { 1, { 19 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 19,12,11 } };
const TfArray<1, int> outputs5 = { 1, { 20 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 20,4 } };
const TfArray<1, int> outputs6 = { 1, { 21 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 21 } };
const TfArray<1, int> outputs7 = { 1, { 22 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 22,5 } };
const TfArray<1, int> outputs8 = { 1, { 23 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 23,10,9 } };
const TfArray<1, int> outputs9 = { 1, { 24 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 24,6 } };
const TfArray<1, int> outputs10 = { 1, { 25 } };
const TfLiteFullyConnectedParams opdata11 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs11 = { 3, { 25,8,7 } };
const TfArray<1, int> outputs11 = { 1, { 26 } };
const TfLiteSoftmaxParams opdata12 = { 1 };
const TfArray<1, int> inputs12 = { 1, { 26 } };
const TfArray<1, int> outputs12 = { 1, { 27 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension0, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 6400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension15, 3168, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3168, (TfLiteIntArray*)&tensor_dimension16, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension17, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension18, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension20, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension22, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension24, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 3200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3200, (TfLiteIntArray*)&tensor_dimension26, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_SOFTMAX, },
};

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  };
  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }
  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }

  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }
  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }
  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }
};

} // namespace

TfLiteStatus tflite_learn_9_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  ctx.impl_ = static_cast<void*>(&micro_context_);
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;
  ctx.tensors_size = 28;
  for (size_t i = 0; i < 28; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 13; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 13; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      ResetTensors();

      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteStatus tflite_learn_9_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(inTensorIndices[index], tensor);
  return kTfLiteOk;
}

static const int outTensorIndices[] = {
  27, 
};
TfLiteStatus tflite_learn_9_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(outTensorIndices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_invoke() {
  for (size_t i = 0; i < 13; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_9_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
